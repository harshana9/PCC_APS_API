<?php

/*
Request URI format
http://IP_ADDRESS:PORT_NUMBER/aps_api/api/user/view.php?token=JWT_TOKEN

Request Body sample
N/A

*/

//includes
require_once "../../database/dbcon.php";
require_once "../../request/paramCapture.php";
require_once "../../request/jwtVerify.php";

header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Methods: GET");

if ($_SERVER['REQUEST_METHOD'] === 'GET') {

    //JwtValidation
    try{
        if(isset($_GET['token'])){
            $token = trim($_GET['token']);
            try{
                //params of JWTValidation(token, damin, view, delete, create, update)
                JWTValidation($token,true, true, false, false, false);
            }
            catch(Exception $e){
                //echo $e;
                header("Status: 400 Bad Request",false,400);
                header("Authentication Failed" ,false,400);
                exit; 
            }
        }
        else{
            throw new Exception("Error: Authentication Token Required.");
        }
    }
    catch(Exception $e){
        throw new Exception("Error: Token might be timeout.");
    }

    //Databse Connection
    $dbCon = new DbCon();
    $conn = $dbCon->getConn();

    //define data atrributes
    $returnBody=array();

    //Select data from database
    try{
        // prepare sql and bind parameters
        $sql = "SELECT * FROM `user` WHERE `usr_deleted`=0;";
        $stmt = $conn->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll(\PDO::FETCH_ASSOC);
        
        if(count($result)>0){
            $returnItem=array();
            foreach($result as $row) {
                $returnItem["id"]=$row["usr_id"];
                $returnItem["username"]=$row["usr_username"];
                $returnItem["firstname"]=$row["usr_fname"];
                $returnItem["lastname"]=$row["usr_lname"];
                $returnItem["email"]=$row["usr_email"];
                $returnItem["admin"]=$row["usr_admin"];
                $returnItem["view"]=$row["usr_view"];
                $returnItem["insert"]=$row["usr_create"];
                $returnItem["update"]=$row["usr_update"];
                $returnItem["delete"]=$row["usr_delete"];
                array_push($returnBody, $returnItem);
            }
        }
        
        header("Status: 200 Request Fulfilled.",true,200);
        echo  json_encode($returnBody);
        exit;
    }
    catch(PDOException $e){
        $msg = $e->getMessage();
        header("Status: 500 Internal Server Error",false,500);
        header("Error: $msg",false,500);
        exit;
    }
}
else{
    header("Status: 400 Bad Request",false,400);
    header("Error: RInvalid request method",false,400);
    exit;    
}
?>